suite: deployment custom volume test
templates:
  - common.yaml
tests:
  - it: should pass with default values
    documentIndex: &deploymentDoc 0
    asserts:
      - hasDocuments:
          count: 3
      - isKind:
          of: Deployment
      - isNull:
          path: spec.template.spec.volume

  - it: should fail with custom type but empty volumeSpec
    set:
      persistence:
        some_volume:
          type: custom
          enabled: true
          mountPath: /container
          volumeSpec: {}
    asserts:
      - failedTemplate:
          errorMessage: You have defined custom persistence type but no <volumeSpec> was given on item (some_volume)

  - it: should pass with custom type volume from tpl
    documentIndex: *deploymentDoc
    set:
      k1: value1
      name: some_name
      persistence:
        some_volume:
          type: custom
          enabled: true
          mountPath: /container
          volumeSpec:
            arbitraryKey: value
            someDict:
              k1: "{{ .Values.k1 }}"
              k2: value2
            someList:
              - name: "{{ .Values.name }}"
                something: test
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: some_volume
            arbitraryKey: value
            someDict:
              k1: value1
              k2: value2
            someList:
              - name: some_name
                something: test

  - it: should pass with multiple custom type volume from tpl
    documentIndex: *deploymentDoc
    set:
      v1: value1
      v2: value2
      name1: some_name1
      name2: some_name2
      persistence:
        some_volume:
          type: custom
          enabled: true
          mountPath: /container
          volumeSpec:
            arbitraryKey: value
            someDict:
              k1: "{{ .Values.v1 }}"
              k2: value
            someList:
              - name: "{{ .Values.name1 }}"
                something: test
        some_volume2:
          type: custom
          enabled: true
          mountPath: /container
          volumeSpec:
            arbitraryKey: value
            someDict:
              k1: "{{ .Values.v2 }}"
              k2: value
            someList:
              - name: "{{ .Values.name2 }}"
                something: test
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: some_volume
            arbitraryKey: value
            someDict:
              k1: value1
              k2: value
            someList:
              - name: some_name1
                something: test
      - contains:
          path: spec.template.spec.volumes
          content:
            name: some_volume2
            arbitraryKey: value
            someDict:
              k1: value2
              k2: value
            someList:
              - name: some_name2
                something: test
