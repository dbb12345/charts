suite: certificate secret mount test
templates:
  - common.yaml
release:
  revision: 2
tests:
  - it: should pass with 1 secret created
    documentIndex: &secretDoc 0
    set:
      scaleCerts:
        certname:
          id: 1
      # Simulating middleware injection
      ixCertificates:
        "1":
          certificate: cert_content
          privatekey: some_key
    asserts:
      - isKind:
          of: Secret
      - isAPIVersion:
          of: v1
      - equal:
          path: type
          value: kubernetes.io/tls
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test-certname-ixcert-1-2
      - isNotEmpty:
          path: data.tls\.crt
      - isNotEmpty:
          path: data.tls\.key

  - it: should pass with secret with dash in the name and mounted both certificate and private key
    documentIndex: &deploymentDoc 1
    set:
      # Simulating middleware injection
      ixCertificates:
        "1":
          certificate: cert_content
          privatekey: some_key
      scaleCerts:
        cert-name:
          id: 1
          cert:
            enabled: true
            path: /some/path/crt.key
            readOnly: true
            defaultMode: "0700"
          key:
            enabled: true
            path: /some/path/key.key
            readOnly: true
            defaultMode: "0700"
    asserts:
      - isKind:
          of: Deployment
      - matchRegex:
          path: spec.template.spec.volumes[0].name
          pattern: &patternCert '^ix-certificate-cert-([0-9]+)-([a-z0-9]){5}$'
      - equal:
          path: spec.template.spec.volumes[0].secret
          value:
            secretName: RELEASE-NAME-common-test-cert-name-ixcert-1-2
            defaultMode: 0700
      - matchRegex:
          path: spec.template.spec.containers[0].volumeMounts[0].name
          pattern: *patternCert
      - isSubset:
          path: spec.template.spec.containers[0].volumeMounts[0]
          content:
            mountPath: /some/path/crt.key
            subPath: tls.crt
            readOnly: true
      - matchRegex:
          path: spec.template.spec.volumes[1].name
          pattern: &patternKey '^ix-certificate-key-([0-9]+)-([a-z0-9]){5}$'
      - equal:
          path: spec.template.spec.volumes[1].secret
          value:
            secretName: RELEASE-NAME-common-test-cert-name-ixcert-1-2
            defaultMode: 0700
      - matchRegex:
          path: spec.template.spec.containers[0].volumeMounts[1].name
          pattern: *patternKey
      - isSubset:
          path: spec.template.spec.containers[0].volumeMounts[1]
          content:
            mountPath: /some/path/key.key
            subPath: tls.key
            readOnly: true

  - it: should pass with mounted secret both certificate and private key
    documentIndex: *deploymentDoc
    set:
      # Simulating middleware injection
      ixCertificates:
        "1":
          certificate: cert_content
          privatekey: some_key
      scaleCerts:
        certname:
          id: 1
          cert:
            enabled: true
            path: /some/path/crt.key
            readOnly: true
            defaultMode: "0700"
          key:
            enabled: true
            path: /some/path/key.key
            readOnly: true
            defaultMode: "0700"
    asserts:
      - isKind:
          of: Deployment
      - matchRegex:
          path: spec.template.spec.volumes[0].name
          pattern: *patternCert
      - equal:
          path: spec.template.spec.volumes[0].secret
          value:
            secretName: RELEASE-NAME-common-test-certname-ixcert-1-2
            defaultMode: 0700
      - matchRegex:
          path: spec.template.spec.containers[0].volumeMounts[0].name
          pattern: *patternCert
      - isSubset:
          path: spec.template.spec.containers[0].volumeMounts[0]
          content:
            mountPath: /some/path/crt.key
            subPath: tls.crt
            readOnly: true
      - matchRegex:
          path: spec.template.spec.volumes[1].name
          pattern: *patternKey
      - equal:
          path: spec.template.spec.volumes[1].secret
          value:
            secretName: RELEASE-NAME-common-test-certname-ixcert-1-2
            defaultMode: 0700
      - matchRegex:
          path: spec.template.spec.containers[0].volumeMounts[1].name
          pattern: *patternKey
      - isSubset:
          path: spec.template.spec.containers[0].volumeMounts[1]
          content:
            mountPath: /some/path/key.key
            subPath: tls.key
            readOnly: true

  - it: should pass with mounted secret only certificate
    documentIndex: *deploymentDoc
    set:
      # Simulating middleware injection
      ixCertificates:
        "1":
          certificate: cert_content
          privatekey: some_key
      scaleCerts:
        certname:
          id: 1
          cert:
            enabled: true
            path: /some/path/crt.key
            readOnly: true
            defaultMode: "0700"
          key:
            enabled: false
            path: /some/path/key.key
            readOnly: true
            defaultMode: "0700"
    asserts:
      - isKind:
          of: Deployment
      - matchRegex:
          path: spec.template.spec.volumes[0].name
          pattern: *patternCert
      - equal:
          path: spec.template.spec.volumes[0].secret
          value:
            secretName: RELEASE-NAME-common-test-certname-ixcert-1-2
            defaultMode: 0700
      - matchRegex:
          path: spec.template.spec.containers[0].volumeMounts[0].name
          pattern: *patternCert
      - isSubset:
          path: spec.template.spec.containers[0].volumeMounts[0]
          content:
            mountPath: /some/path/crt.key
            subPath: tls.crt
            readOnly: true

  - it: should pass with mounted secret only private key
    documentIndex: *deploymentDoc
    set:
      # Simulating middleware injection
      ixCertificates:
        "1":
          certificate: cert_content
          privatekey: some_key
      scaleCerts:
        certname:
          id: 1
          cert:
            enabled: false
            path: /some/path/crt.key
            readOnly: true
            defaultMode: "0700"
          key:
            enabled: true
            path: /some/path/key.key
            readOnly: true
            defaultMode: "0700"
    asserts:
      - matchRegex:
          path: spec.template.spec.volumes[0].name
          pattern: *patternKey
      - equal:
          path: spec.template.spec.volumes[0].secret
          value:
            secretName: RELEASE-NAME-common-test-certname-ixcert-1-2
            defaultMode: 0700
      - matchRegex:
          path: spec.template.spec.containers[0].volumeMounts[0].name
          pattern: *patternKey
      - isSubset:
          path: spec.template.spec.containers[0].volumeMounts[0]
          content:
            mountPath: /some/path/key.key
            subPath: tls.key
            readOnly: true

  - it: should pass with 2 mounted secret both certificate and private key
    documentIndex: &secondDeploymentDoc 2
    set:
      # Simulating middleware injection
      ixCertificates:
        "1":
          certificate: cert_content
          privatekey: some_key
        "2":
          certificate: cert_content
          privatekey: some_key
      scaleCerts:
        certname:
          id: 1
          cert:
            enabled: true
            path: /some/path/crt.key
            readOnly: true
            defaultMode: "0700"
          key:
            enabled: true
            path: /some/path/key.key
            readOnly: true
            defaultMode: "0700"
        certname2:
          id: 2
          cert:
            enabled: true
            path: /some/path/crt.key
            readOnly: true
            defaultMode: "0700"
          key:
            enabled: true
            path: /some/path/key.key
            readOnly: true
            defaultMode: "0700"
    asserts:
      - isKind:
          of: Deployment
      - matchRegex:
          path: spec.template.spec.volumes[0].name
          pattern: *patternCert
      - equal:
          path: spec.template.spec.volumes[0].secret
          value:
            secretName: RELEASE-NAME-common-test-certname-ixcert-1-2
            defaultMode: 0700
      - matchRegex:
          path: spec.template.spec.containers[0].volumeMounts[0].name
          pattern: *patternCert
      - isSubset:
          path: spec.template.spec.containers[0].volumeMounts[0]
          content:
            mountPath: /some/path/crt.key
            subPath: tls.crt
            readOnly: true

      - matchRegex:
          path: spec.template.spec.volumes[1].name
          pattern: *patternCert
      - equal:
          path: spec.template.spec.volumes[1].secret
          value:
            secretName: RELEASE-NAME-common-test-certname2-ixcert-2-2
            defaultMode: 0700
      - matchRegex:
          path: spec.template.spec.containers[0].volumeMounts[1].name
          pattern: *patternCert
      - isSubset:
          path: spec.template.spec.containers[0].volumeMounts[1]
          content:
            mountPath: /some/path/crt.key
            subPath: tls.crt
            readOnly: true

      - matchRegex:
          path: spec.template.spec.volumes[2].name
          pattern: *patternKey
      - equal:
          path: spec.template.spec.volumes[2].secret
          value:
            secretName: RELEASE-NAME-common-test-certname-ixcert-1-2
            defaultMode: 0700
      - matchRegex:
          path: spec.template.spec.containers[0].volumeMounts[2].name
          pattern: *patternKey
      - isSubset:
          path: spec.template.spec.containers[0].volumeMounts[2]
          content:
            mountPath: /some/path/key.key
            subPath: tls.key
            readOnly: true

      - matchRegex:
          path: spec.template.spec.volumes[3].name
          pattern: *patternKey
      - equal:
          path: spec.template.spec.volumes[3].secret
          value:
            secretName: RELEASE-NAME-common-test-certname2-ixcert-2-2
            defaultMode: 0700
      - matchRegex:
          path: spec.template.spec.containers[0].volumeMounts[3].name
          pattern: *patternKey
      - isSubset:
          path: spec.template.spec.containers[0].volumeMounts[3]
          content:
            mountPath: /some/path/key.key
            subPath: tls.key
            readOnly: true

  - it: should pass with mounted secret both certificate and private key without extra options
    documentIndex: *deploymentDoc
    set:
      # Simulating middleware injection
      ixCertificates:
        "1":
          certificate: cert_content
          privatekey: some_key
      scaleCerts:
        certname:
          id: 1
          cert:
            enabled: true
            path: /some/path/crt.key
          key:
            enabled: true
            path: /some/path/key.key
    asserts:
      - isKind:
          of: Deployment
      - matchRegex:
          path: spec.template.spec.volumes[0].name
          pattern: *patternCert
      - equal:
          path: spec.template.spec.volumes[0].secret
          value:
            secretName: RELEASE-NAME-common-test-certname-ixcert-1-2
      - matchRegex:
          path: spec.template.spec.containers[0].volumeMounts[0].name
          pattern: *patternCert
      - isSubset:
          path: spec.template.spec.containers[0].volumeMounts[0]
          content:
            mountPath: /some/path/crt.key
            subPath: tls.crt
      - matchRegex:
          path: spec.template.spec.volumes[1].name
          pattern: *patternKey
      - equal:
          path: spec.template.spec.volumes[1].secret
          value:
            secretName: RELEASE-NAME-common-test-certname-ixcert-1-2
      - matchRegex:
          path: spec.template.spec.containers[0].volumeMounts[1].name
          pattern: *patternKey
      - isSubset:
          path: spec.template.spec.containers[0].volumeMounts[1]
          content:
            mountPath: /some/path/key.key
            subPath: tls.key

  - it: should pass with mounted secret both certificate and private key without extra options and paths from tpl
    documentIndex: *deploymentDoc
    set:
      path1: /some/path/crt.key
      path2: /some/path/key.key
      # Simulating middleware injection
      ixCertificates:
        "1":
          certificate: cert_content
          privatekey: some_key
      scaleCerts:
        certname:
          id: 1
          cert:
            enabled: true
            path: "{{ .Values.path1 }}"
          key:
            enabled: true
            path: "{{ .Values.path2 }}"
    asserts:
      - isKind:
          of: Deployment
      - matchRegex:
          path: spec.template.spec.volumes[0].name
          pattern: *patternCert
      - equal:
          path: spec.template.spec.volumes[0].secret
          value:
            secretName: RELEASE-NAME-common-test-certname-ixcert-1-2
      - matchRegex:
          path: spec.template.spec.containers[0].volumeMounts[0].name
          pattern: *patternCert
      - isSubset:
          path: spec.template.spec.containers[0].volumeMounts[0]
          content:
            mountPath: /some/path/crt.key
            subPath: tls.crt
      - matchRegex:
          path: spec.template.spec.volumes[1].name
          pattern: *patternKey
      - equal:
          path: spec.template.spec.volumes[1].secret
          value:
            secretName: RELEASE-NAME-common-test-certname-ixcert-1-2
      - matchRegex:
          path: spec.template.spec.containers[0].volumeMounts[1].name
          pattern: *patternKey
      - isSubset:
          path: spec.template.spec.containers[0].volumeMounts[1]
          content:
            mountPath: /some/path/key.key
            subPath: tls.key
