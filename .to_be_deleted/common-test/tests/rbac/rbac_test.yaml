
suite: rbac test
templates:
  - common.yaml
chart:
  appVersion: &appVer v1.2.3
release:
  namespace: &ns some_name_space
tests:
  - it: should pass with default values
    documentIndex: &deploymentDoc 0
    asserts:
      - hasDocuments:
          count: 3
      - isKind:
          of: Deployment

  - it: should fail with multiple rbac, without any set as primary
    set:
      rbac:
        main:
          enabled: true
          primary: false
        main2:
          enabled: true
          primary: false
    asserts:
      - failedTemplate:
          errorMessage: At least one RBAC must be set as primary

  - it: should fail with no rules in rbac
    set:
      rbac:
        main:
          enabled: true
          rules: []
          subjects: &subjects
            - kind: something
              name: something
              apiGroup: something
    asserts:
      - failedTemplate:
          errorMessage: <rules> cannot be empty in RBAC.

  - it: should fail with no apiGroups in rules
    set:
      rbac:
        main:
          enabled: true
          rules:
            - apiGroups: []
              resources:
                - something
              verbs:
                - something
          subjects: *subjects
    asserts:
      - failedTemplate:
          errorMessage: <apiGroups> cannot be empty in RBAC rules.

  - it: should fail with no resources in rules
    set:
      rbac:
        main:
          enabled: true
          rules:
            - apiGroups:
                - something
              resources: []
              verbs:
                - something
          subjects: *subjects
    asserts:
      - failedTemplate:
          errorMessage: <resources> cannot be empty in RBAC rules.

  - it: should fail with no verbs in rules
    set:
      rbac:
        main:
          enabled: true
          rules:
            - apiGroups:
                - something
              resources:
                - something
              verbs: []
          subjects: *subjects
    asserts:
      - failedTemplate:
          errorMessage: <verbs> cannot be empty in RBAC rules.

  - it: should fail with no kind in subjects
    set:
      rbac:
        main:
          enabled: true
          rules: &rules
            - apiGroups:
                - something
              resources:
                - something
              verbs:
                - something
          subjects:
            - kind: ""
    asserts:
      - failedTemplate:
          errorMessage: <kind> cannot be empty in RBAC subjects.

  - it: should fail with no name in subjects
    set:
      rbac:
        main:
          enabled: true
          rules: *rules
          subjects:
            - kind: something
              name: ""
    asserts:
      - failedTemplate:
          errorMessage: <name> cannot be empty in RBAC subjects.

  - it: should fail with no apiGroup in subjects
    set:
      rbac:
        main:
          enabled: true
          rules: *rules
          subjects:
            - kind: something
              name: something
              apiGroup: ""
    asserts:
      - failedTemplate:
          errorMessage: <apiGroup> cannot be empty in RBAC subjects.

  - it: should pass with rbac account enabled (Role)
    documentIndex: &roleDoc 0
    set:
      rbac:
        main:
          enabled: true
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: Role
      - isAPIVersion:
          of: rbac.authorization.k8s.io/v1
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test
      - equal:
          path: metadata.namespace
          value: *ns

  - it: should pass with rbac account enabled (RoleBinding)
    documentIndex: &roleBindingDoc 1
    set:
      rbac:
        main:
          enabled: true
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: RoleBinding
      - isAPIVersion:
          of: rbac.authorization.k8s.io/v1
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test
      - equal:
          path: metadata.namespace
          value: *ns
      - equal:
          path: roleRef
          value:
            apiGroup: rbac.authorization.k8s.io
            kind: Role
            name: RELEASE-NAME-common-test

  - it: should pass with rbac account enabled (ClusterRole)
    documentIndex: &roleDoc 0
    set:
      rbac:
        main:
          enabled: true
          clusterWide: true
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: ClusterRole
      - isAPIVersion:
          of: rbac.authorization.k8s.io/v1
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test

  - it: should pass with rbac account enabled (ClusterRoleBinding)
    documentIndex: &roleBindingDoc 1
    set:
      rbac:
        main:
          enabled: true
          clusterWide: true
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: ClusterRoleBinding
      - isAPIVersion:
          of: rbac.authorization.k8s.io/v1
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test
      - equal:
          path: roleRef
          value:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: RELEASE-NAME-common-test

  - it: should pass with primary rbac enabled and nameOverride defined (Role)
    documentIndex: *roleDoc
    set:
      rbac:
        main:
          enabled: true
          nameOverride: some-name
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: Role
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test-some-name

  - it: should pass with primary rbac enabled and nameOverride defined (RoleBinding)
    documentIndex: *roleBindingDoc
    set:
      rbac:
        main:
          enabled: true
          nameOverride: some-name
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: RoleBinding
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test-some-name

  - it: should pass with primary rbac enabled and nameOverride defined (ClusterRole)
    documentIndex: *roleDoc
    set:
      rbac:
        main:
          enabled: true
          nameOverride: some-name
          clusterWide: true
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: ClusterRole
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test-some-name

  - it: should pass with primary rbac enabled and nameOverride defined (ClusterRoleBinding)
    documentIndex: *roleBindingDoc
    set:
      rbac:
        main:
          enabled: true
          nameOverride: some-name
          clusterWide: true
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: ClusterRoleBinding
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test-some-name

  - it: should pass with primary rbac enabled annotations and labels added (Role)
    documentIndex: *roleDoc
    set:
      rbac:
        main:
          enabled: true
          annotations:
            key1: value1
            key2: value2
          labels:
            key3: value3
            key4: value4
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: Role
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test
      - equal:
          path: metadata.annotations
          value:
            key1: value1
            key2: value2
      - equal:
          path: metadata.labels
          value:
            app: common-test
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: common-test
            app.kubernetes.io/version: *appVer
            helm-revision: "0"
            helm.sh/chart: common-test-1.0.0
            release: RELEASE-NAME
            key3: value3
            key4: value4

  - it: should pass with primary rbac enabled annotations and labels added (RoleBinding)
    documentIndex: *roleBindingDoc
    set:
      rbac:
        main:
          enabled: true
          annotations:
            key1: value1
            key2: value2
          labels:
            key3: value3
            key4: value4
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: RoleBinding
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test
      - equal:
          path: metadata.annotations
          value:
            key1: value1
            key2: value2
      - equal:
          path: metadata.labels
          value:
            app: common-test
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: common-test
            app.kubernetes.io/version: *appVer
            helm-revision: "0"
            helm.sh/chart: common-test-1.0.0
            release: RELEASE-NAME
            key3: value3
            key4: value4

  - it: should pass with primary rbac enabled annotations and labels added (ClusterRole)
    documentIndex: *roleDoc
    set:
      rbac:
        main:
          enabled: true
          clusterWide: true
          annotations:
            key1: value1
            key2: value2
          labels:
            key3: value3
            key4: value4
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: ClusterRole
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test
      - equal:
          path: metadata.annotations
          value:
            key1: value1
            key2: value2
      - equal:
          path: metadata.labels
          value:
            app: common-test
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: common-test
            app.kubernetes.io/version: *appVer
            helm-revision: "0"
            helm.sh/chart: common-test-1.0.0
            release: RELEASE-NAME
            key3: value3
            key4: value4

  - it: should pass with primary rbac enabled annotations and labels added (ClusterRoleBinding)
    documentIndex: *roleBindingDoc
    set:
      rbac:
        main:
          enabled: true
          clusterWide: true
          annotations:
            key1: value1
            key2: value2
          labels:
            key3: value3
            key4: value4
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: ClusterRoleBinding
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test
      - equal:
          path: metadata.annotations
          value:
            key1: value1
            key2: value2
      - equal:
          path: metadata.labels
          value:
            app: common-test
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: common-test
            app.kubernetes.io/version: *appVer
            helm-revision: "0"
            helm.sh/chart: common-test-1.0.0
            release: RELEASE-NAME
            key3: value3
            key4: value4

  - it: should pass with primary rbac enabled annotations and labels added from tpl (Role)
    documentIndex: *roleDoc
    set:
      k1: value1
      k2: value2
      k3: value3
      k4: value4
      rbac:
        main:
          enabled: true
          annotations:
            key1: "{{ .Values.k1 }}"
            key2: "{{ .Values.k2 }}"
          labels:
            key3: "{{ .Values.k3 }}"
            key4: "{{ .Values.k4 }}"
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: Role
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test
      - equal:
          path: metadata.annotations
          value:
            key1: value1
            key2: value2
      - equal:
          path: metadata.labels
          value:
            app: common-test
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: common-test
            app.kubernetes.io/version: *appVer
            helm-revision: "0"
            helm.sh/chart: common-test-1.0.0
            release: RELEASE-NAME
            key3: value3
            key4: value4

  - it: should pass with primary rbac enabled annotations and labels added from tpl (RoleBinding)
    documentIndex: *roleBindingDoc
    set:
      k1: value1
      k2: value2
      k3: value3
      k4: value4
      rbac:
        main:
          enabled: true
          annotations:
            key1: "{{ .Values.k1 }}"
            key2: "{{ .Values.k2 }}"
          labels:
            key3: "{{ .Values.k3 }}"
            key4: "{{ .Values.k4 }}"
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: RoleBinding
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test
      - equal:
          path: metadata.annotations
          value:
            key1: value1
            key2: value2
      - equal:
          path: metadata.labels
          value:
            app: common-test
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: common-test
            app.kubernetes.io/version: *appVer
            helm-revision: "0"
            helm.sh/chart: common-test-1.0.0
            release: RELEASE-NAME
            key3: value3
            key4: value4

  - it: should pass with primary rbac enabled annotations and labels added (ClusterRole)
    documentIndex: *roleDoc
    set:
      k1: value1
      k2: value2
      k3: value3
      k4: value4
      rbac:
        main:
          enabled: true
          clusterWide: true
          annotations:
            key1: "{{ .Values.k1 }}"
            key2: "{{ .Values.k2 }}"
          labels:
            key3: "{{ .Values.k3 }}"
            key4: "{{ .Values.k4 }}"
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: ClusterRole
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test
      - equal:
          path: metadata.annotations
          value:
            key1: value1
            key2: value2
      - equal:
          path: metadata.labels
          value:
            app: common-test
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: common-test
            app.kubernetes.io/version: *appVer
            helm-revision: "0"
            helm.sh/chart: common-test-1.0.0
            release: RELEASE-NAME
            key3: value3
            key4: value4

  - it: should pass with primary rbac enabled annotations and labels added (ClusterRoleBinding)
    documentIndex: *roleBindingDoc
    set:
      k1: value1
      k2: value2
      k3: value3
      k4: value4
      rbac:
        main:
          enabled: true
          clusterWide: true
          annotations:
            key1: "{{ .Values.k1 }}"
            key2: "{{ .Values.k2 }}"
          labels:
            key3: "{{ .Values.k3 }}"
            key4: "{{ .Values.k4 }}"
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: ClusterRoleBinding
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test
      - equal:
          path: metadata.annotations
          value:
            key1: value1
            key2: value2
      - equal:
          path: metadata.labels
          value:
            app: common-test
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: common-test
            app.kubernetes.io/version: *appVer
            helm-revision: "0"
            helm.sh/chart: common-test-1.0.0
            release: RELEASE-NAME
            key3: value3
            key4: value4


  - it: should pass with non-primary rbac enabled and nameOverride defined (Role - main)
    documentIndex: *roleDoc
    set:
      rbac:
        main:
          enabled: true
          primary: true
          rules: *rules
          subjects: *subjects
        other:
          enabled: true
          primary: false
          nameOverride: some-name
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: Role
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test

  - it: should pass with non-primary rbac enabled and nameOverride defined (RoleBinding - main)
    documentIndex: *roleBindingDoc
    set:
      rbac:
        main:
          enabled: true
          primary: true
          rules: *rules
          subjects: *subjects
        other:
          enabled: true
          primary: false
          nameOverride: some-name
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: RoleBinding
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test

  - it: should pass with non-primary rbac enabled and nameOverride defined (Role - main)
    documentIndex: &otherRoleDoc 2
    set:
      rbac:
        main:
          enabled: true
          primary: true
          rules: *rules
          subjects: *subjects
        other:
          enabled: true
          primary: false
          nameOverride: some-name
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: Role
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test-some-name

  - it: should pass with non-primary rbac enabled and nameOverride defined (RoleBinding - other)
    documentIndex: &otherRoleBindingDoc 3
    set:
      rbac:
        main:
          enabled: true
          primary: true
          rules: *rules
          subjects: *subjects
        other:
          enabled: true
          primary: false
          nameOverride: some-name
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: RoleBinding
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test-some-name

  - it: should pass with non-primary rbac enabled and nameOverride defined (ClusterRole - other)
    documentIndex: &otherRoleDoc 2
    set:
      rbac:
        main:
          enabled: true
          primary: true
          rules: *rules
          subjects: *subjects
        other:
          enabled: true
          primary: false
          clusterWide: true
          nameOverride: some-name
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: ClusterRole
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test-some-name

  - it: should pass with non-primary rbac enabled and nameOverride defined (ClusterRoleBinding - other)
    documentIndex: &otherRoleBindingDoc 3
    set:
      rbac:
        main:
          enabled: true
          primary: true
          rules: *rules
          subjects: *subjects
        other:
          enabled: true
          primary: false
          clusterWide: true
          nameOverride: some-name
          rules: *rules
          subjects: *subjects
    asserts:
      - isKind:
          of: ClusterRoleBinding
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test-some-name

  - it: should pass with "" in apiGroups in rules
    documentIndex: *roleDoc
    set:
      rbac:
        main:
          enabled: true
          rules:
            - apiGroups:
                - ""
              resources:
                - something
              verbs:
                - something
          subjects: *subjects
    asserts:
      - isKind:
          of: Role
      - equal:
          path: rules
          value:
            - apiGroups:
                - ""
              resources:
                - something
              verbs:
                - something

  - it: should pass with "" in apiGroups in rules, multiple entries
    documentIndex: *roleDoc
    set:
      rbac:
        main:
          enabled: true
          rules:
            - apiGroups:
                - ""
              resources:
                - something
              verbs:
                - something
            - apiGroups:
                - ""
              resources:
                - something_else
              verbs:
                - something_else
          subjects: *subjects
    asserts:
      - isKind:
          of: Role
      - equal:
          path: rules
          value:
            - apiGroups:
                - ""
              resources:
                - something
              verbs:
                - something
            - apiGroups:
                - ""
              resources:
                - something_else
              verbs:
                - something_else

  - it: should pass with * in rules
    documentIndex: *roleDoc
    set:
      rbac:
        main:
          enabled: true
          rules:
            - apiGroups:
                - "*"
              resources:
                - "*"
              verbs:
                - "*"
          subjects: *subjects
    asserts:
      - isKind:
          of: Role
      - equal:
          path: rules
          value:
            - apiGroups:
                - "*"
              resources:
                - "*"
              verbs:
                - "*"

  - it: should pass with * in rules, multiple entries
    documentIndex: *roleDoc
    set:
      rbac:
        main:
          enabled: true
          rules:
            - apiGroups:
                - "*"
              resources:
                - "*"
              verbs:
                - "*"
            - apiGroups:
                - "*"
              resources:
                - "*"
              verbs:
                - "*"
          subjects: *subjects
    asserts:
      - isKind:
          of: Role
      - equal:
          path: rules
          value:
            - apiGroups:
                - "*"
              resources:
                - "*"
              verbs:
                - "*"
            - apiGroups:
                - "*"
              resources:
                - "*"
              verbs:
                - "*"

  - it: should pass with rules from tpl
    documentIndex: *roleDoc
    set:
      k1: "*"
      k2: value2
      k3: value3
      rbac:
        main:
          enabled: true
          rules:
            - apiGroups:
                - "{{ .Values.k1 }}"
              resources:
                - "{{ .Values.k2 }}"
              verbs:
                - "{{ .Values.k3 }}"
          subjects: *subjects
    asserts:
      - isKind:
          of: Role
      - equal:
          path: rules
          value:
            - apiGroups:
                - "*"
              resources:
                - value2
              verbs:
                - value3

  - it: should pass with rules from tpl, multiple entries
    documentIndex: *roleDoc
    set:
      k1: "*"
      k2: value2
      k3: value3
      k4: "*"
      k5: value5
      k6: value6
      rbac:
        main:
          enabled: true
          rules:
            - apiGroups:
                - "{{ .Values.k1 }}"
              resources:
                - "{{ .Values.k2 }}"
              verbs:
                - "{{ .Values.k3 }}"
            - apiGroups:
                - "{{ .Values.k4 }}"
              resources:
                - "{{ .Values.k5 }}"
              verbs:
                - "{{ .Values.k6 }}"
          subjects: *subjects
    asserts:
      - isKind:
          of: Role
      - equal:
          path: rules
          value:
            - apiGroups:
                - "*"
              resources:
                - value2
              verbs:
                - value3
            - apiGroups:
                - "*"
              resources:
                - value5
              verbs:
                - value6

  - it: should pass with rules from tpl, multiple entries (ClusterRole)
    documentIndex: *roleDoc
    set:
      k1: "*"
      k2: value2
      k3: value3
      k4: "*"
      k5: value5
      k6: value6
      rbac:
        main:
          enabled: true
          clusterWide: true
          rules:
            - apiGroups:
                - "{{ .Values.k1 }}"
              resources:
                - "{{ .Values.k2 }}"
              verbs:
                - "{{ .Values.k3 }}"
            - apiGroups:
                - "{{ .Values.k4 }}"
              resources:
                - "{{ .Values.k5 }}"
              verbs:
                - "{{ .Values.k6 }}"
          subjects: *subjects
    asserts:
      - isKind:
          of: ClusterRole
      - equal:
          path: rules
          value:
            - apiGroups:
                - "*"
              resources:
                - value2
              verbs:
                - value3
            - apiGroups:
                - "*"
              resources:
                - value5
              verbs:
                - value6

  - it: should pass with subjects set
    documentIndex: *roleBindingDoc
    set:
      rbac:
        main:
          enabled: true
          rules: *rules
          subjects:
            - kind: value1
              name: value2
              apiGroup: value3
    asserts:
      - isKind:
          of: RoleBinding
      - equal:
          path: subjects
          value:
            - kind: ServiceAccount
              name: default
              namespace: *ns
            - kind: value1
              name: value2
              apiGroup: value3

  - it: should pass with subjects set, multiple entries
    documentIndex: *roleBindingDoc
    set:
      rbac:
        main:
          enabled: true
          rules: *rules
          subjects:
            - kind: value1
              name: value2
              apiGroup: value3
            - kind: value4
              name: value5
              apiGroup: value6
    asserts:
      - isKind:
          of: RoleBinding
      - equal:
          path: subjects
          value:
            - kind: ServiceAccount
              name: default
              namespace: *ns
            - kind: value1
              name: value2
              apiGroup: value3
            - kind: value4
              name: value5
              apiGroup: value6

  - it: should pass with subjects set, multiple entries from tpl
    documentIndex: *roleBindingDoc
    set:
      k1: value1
      k2: value2
      k3: value3
      k4: value4
      k5: value5
      k6: value6
      rbac:
        main:
          enabled: true
          rules: *rules
          subjects:
            - kind: "{{ .Values.k1 }}"
              name: "{{ .Values.k2 }}"
              apiGroup: "{{ .Values.k3 }}"
            - kind: "{{ .Values.k4 }}"
              name: "{{ .Values.k5 }}"
              apiGroup: "{{ .Values.k6 }}"
    asserts:
      - isKind:
          of: RoleBinding
      - equal:
          path: subjects
          value:
            - kind: ServiceAccount
              name: default
              namespace: *ns
            - kind: value1
              name: value2
              apiGroup: value3
            - kind: value4
              name: value5
              apiGroup: value6

  - it: should pass with subjects set, multiple entries from tpl (ClusterRoleBinding)
    documentIndex: *roleBindingDoc
    set:
      k1: value1
      k2: value2
      k3: value3
      k4: value4
      k5: value5
      k6: value6
      rbac:
        main:
          enabled: true
          clusterWide: true
          rules: *rules
          subjects:
            - kind: "{{ .Values.k1 }}"
              name: "{{ .Values.k2 }}"
              apiGroup: "{{ .Values.k3 }}"
            - kind: "{{ .Values.k4 }}"
              name: "{{ .Values.k5 }}"
              apiGroup: "{{ .Values.k6 }}"
    asserts:
      - isKind:
          of: ClusterRoleBinding
      - equal:
          path: subjects
          value:
            - kind: ServiceAccount
              name: default
              namespace: *ns
            - kind: value1
              name: value2
              apiGroup: value3
            - kind: value4
              name: value5
              apiGroup: value6

  - it: should pass with subjects set, multiple entries and 2 service account 1 primary and nameOverride
    documentIndex: &roleBindingDoc 3
    set:
      rbac:
        main:
          enabled: true
          rules: *rules
          subjects:
            - kind: value1
              name: value2
              apiGroup: value3
            - kind: value4
              name: value5
              apiGroup: value6
      serviceAccount:
        main:
          enabled: true
          primary: true
          nameOverride: the-main
        other:
          enabled: true
          primary: false
    asserts:
      - isKind:
          of: RoleBinding
      - equal:
          path: subjects
          value:
            - kind: ServiceAccount
              name: RELEASE-NAME-common-test-the-main
              namespace: *ns
            - kind: value1
              name: value2
              apiGroup: value3
            - kind: value4
              name: value5
              apiGroup: value6

  - it: should pass with subjects set, multiple entries and 2 service account 1 primary
    documentIndex: *roleBindingDoc
    set:
      rbac:
        main:
          enabled: true
          rules: *rules
          subjects:
            - kind: value1
              name: value2
              apiGroup: value3
            - kind: value4
              name: value5
              apiGroup: value6
      serviceAccount:
        main:
          enabled: true
          primary: true
        other:
          enabled: true
          primary: false
    asserts:
      - isKind:
          of: RoleBinding
      - equal:
          path: subjects
          value:
            - kind: ServiceAccount
              name: RELEASE-NAME-common-test
              namespace: *ns
            - kind: value1
              name: value2
              apiGroup: value3
            - kind: value4
              name: value5
              apiGroup: value6
