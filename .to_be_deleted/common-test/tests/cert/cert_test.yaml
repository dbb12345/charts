suite: certificate test
templates:
  - common.yaml
chart:
  appVersion: &appVer v1.2.3
tests:
  - it: should pass with 1 secret created
    documentIndex: &secretDoc 0
    set:
      scaleCerts:
        certname:
          id: 1
      # Simulating middleware injection
      ixCertificates:
        "1":
          certificate: cert_content
          privatekey: some_key
    asserts: &basicAssertion
      - isKind:
          of: Secret
      - isAPIVersion:
          of: v1
      - equal:
          path: type
          value: kubernetes.io/tls
      - equal:
          path: metadata.name
          value: RELEASE-NAME-common-test-certname-ixcert-1-0
      - isNotEmpty:
          path: data.tls\.crt
      - isNotEmpty:
          path: data.tls\.key
      - equal:
          path: metadata.labels
          value:
            app: common-test
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: common-test
            app.kubernetes.io/version: *appVer
            helm-revision: "0"
            helm.sh/chart: common-test-1.0.0
            release: RELEASE-NAME
      - isNull:
          path: metadata.annotations

  - it: should pass with 1 secret created with global labels added
    documentIndex: &secretDoc 0
    set:
      global:
        labels:
          some_key: some_value
          some_key1: some_value1
      scaleCerts:
        certname:
          id: 1
      # Simulating middleware injection
      ixCertificates:
        "1":
          certificate: cert_content
          privatekey: some_key
    asserts: &basicAssertion
      - equal:
          path: metadata.labels
          value:
            app: common-test
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: common-test
            app.kubernetes.io/version: *appVer
            helm-revision: "0"
            helm.sh/chart: common-test-1.0.0
            release: RELEASE-NAME
            some_key: some_value
            some_key1: some_value1
      - isNull:
          path: metadata.annotations

  - it: should pass with 1 secret created with global labels added from tpl
    documentIndex: &secretDoc 0
    set:
      k1: some_value
      k2: some_value1
      global:
        labels:
          some_key: "{{ .Values.k1 }}"
          some_key1: "{{ .Values.k2 }}"
      scaleCerts:
        certname:
          id: 1
      # Simulating middleware injection
      ixCertificates:
        "1":
          certificate: cert_content
          privatekey: some_key
    asserts: &basicAssertion
      - equal:
          path: metadata.labels
          value:
            app: common-test
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: common-test
            app.kubernetes.io/version: *appVer
            helm-revision: "0"
            helm.sh/chart: common-test-1.0.0
            release: RELEASE-NAME
            some_key: some_value
            some_key1: some_value1
      - isNull:
          path: metadata.annotations

  - it: should pass with 1 secret created with global annotations added
    documentIndex: &secretDoc 0
    set:
      global:
        annotations:
          some_key: some_value
          some_key1: some_value1
      scaleCerts:
        certname:
          id: 1
      # Simulating middleware injection
      ixCertificates:
        "1":
          certificate: cert_content
          privatekey: some_key
    asserts: &basicAssertion
      - equal:
          path: metadata.annotations
          value:
            some_key: some_value
            some_key1: some_value1

  - it: should pass with 1 secret created with global annotations added from tpl
    documentIndex: &secretDoc 0
    set:
      k1: some_value
      k2: some_value1
      global:
        annotations:
          some_key: "{{ .Values.k1 }}"
          some_key1: "{{ .Values.k2 }}"
      scaleCerts:
        certname:
          id: 1
      # Simulating middleware injection
      ixCertificates:
        "1":
          certificate: cert_content
          privatekey: some_key
    asserts: &basicAssertion
      - equal:
          path: metadata.annotations
          value:
            some_key: some_value
            some_key1: some_value1

  - it: should fail with uppercase in cert name
    set:
      scaleCerts:
        certName:
          id: 1
      # Simulating middleware injection
      ixCertificates:
        "1":
          certificate: cert_content
          privatekey: some_key
    asserts:
      - failedTemplate:
          errorMessage: Certificate has invalid name (certName). Name must be lowercase.

  - it: should fail with underscore in cert name
    set:
      scaleCerts:
        cert_name:
          id: 1
      # Simulating middleware injection
      ixCertificates:
        "1":
          certificate: cert_content
          privatekey: some_key
    asserts:
      - failedTemplate:
          errorMessage: Certificate has invalid name (cert_name). Name cannot contain underscores (_)
